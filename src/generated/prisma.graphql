# source: https://us1.prisma.sh/brian-cilenti-1f9206/daffy-duck/dev
# timestamp: Tue Jul 10 2018 14:08:13 GMT-0700 (Pacific Daylight Time)

type AggregateOffer {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateZfriendship {
  count: Int!
}

type AggregateZoffer {
  count: Int!
}

type AggregateZrequest {
  count: Int!
}

type AggregateZseller {
  count: Int!
}

type AggregateZuser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createOffer(data: OfferCreateInput!): Offer!
  createZrequest(data: ZrequestCreateInput!): Zrequest!
  createZseller(data: ZsellerCreateInput!): Zseller!
  createZoffer(data: ZofferCreateInput!): Zoffer!
  createUser(data: UserCreateInput!): User!
  createZfriendship(data: ZfriendshipCreateInput!): Zfriendship!
  createZuser(data: ZuserCreateInput!): Zuser!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOffer(data: OfferUpdateInput!, where: OfferWhereUniqueInput!): Offer
  updateZrequest(data: ZrequestUpdateInput!, where: ZrequestWhereUniqueInput!): Zrequest
  updateZseller(data: ZsellerUpdateInput!, where: ZsellerWhereUniqueInput!): Zseller
  updateZoffer(data: ZofferUpdateInput!, where: ZofferWhereUniqueInput!): Zoffer
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateZfriendship(data: ZfriendshipUpdateInput!, where: ZfriendshipWhereUniqueInput!): Zfriendship
  updateZuser(data: ZuserUpdateInput!, where: ZuserWhereUniqueInput!): Zuser
  deletePost(where: PostWhereUniqueInput!): Post
  deleteOffer(where: OfferWhereUniqueInput!): Offer
  deleteZrequest(where: ZrequestWhereUniqueInput!): Zrequest
  deleteZseller(where: ZsellerWhereUniqueInput!): Zseller
  deleteZoffer(where: ZofferWhereUniqueInput!): Zoffer
  deleteUser(where: UserWhereUniqueInput!): User
  deleteZfriendship(where: ZfriendshipWhereUniqueInput!): Zfriendship
  deleteZuser(where: ZuserWhereUniqueInput!): Zuser
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertOffer(where: OfferWhereUniqueInput!, create: OfferCreateInput!, update: OfferUpdateInput!): Offer!
  upsertZrequest(where: ZrequestWhereUniqueInput!, create: ZrequestCreateInput!, update: ZrequestUpdateInput!): Zrequest!
  upsertZseller(where: ZsellerWhereUniqueInput!, create: ZsellerCreateInput!, update: ZsellerUpdateInput!): Zseller!
  upsertZoffer(where: ZofferWhereUniqueInput!, create: ZofferCreateInput!, update: ZofferUpdateInput!): Zoffer!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertZfriendship(where: ZfriendshipWhereUniqueInput!, create: ZfriendshipCreateInput!, update: ZfriendshipUpdateInput!): Zfriendship!
  upsertZuser(where: ZuserWhereUniqueInput!, create: ZuserCreateInput!, update: ZuserUpdateInput!): Zuser!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyOffers(data: OfferUpdateInput!, where: OfferWhereInput): BatchPayload!
  updateManyZrequests(data: ZrequestUpdateInput!, where: ZrequestWhereInput): BatchPayload!
  updateManyZsellers(data: ZsellerUpdateInput!, where: ZsellerWhereInput): BatchPayload!
  updateManyZoffers(data: ZofferUpdateInput!, where: ZofferWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyZfriendships(data: ZfriendshipUpdateInput!, where: ZfriendshipWhereInput): BatchPayload!
  updateManyZusers(data: ZuserUpdateInput!, where: ZuserWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyOffers(where: OfferWhereInput): BatchPayload!
  deleteManyZrequests(where: ZrequestWhereInput): BatchPayload!
  deleteManyZsellers(where: ZsellerWhereInput): BatchPayload!
  deleteManyZoffers(where: ZofferWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyZfriendships(where: ZfriendshipWhereInput): BatchPayload!
  deleteManyZusers(where: ZuserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Offer implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type OfferConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OfferEdge]!
  aggregate: AggregateOffer!
}

input OfferCreateInput {
  title: String!
  text: String!
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type OfferEdge {
  """The item at the end of the edge."""
  node: Offer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OfferOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type OfferPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
}

type OfferSubscriptionPayload {
  mutation: MutationType!
  node: Offer
  updatedFields: [String!]
  previousValues: OfferPreviousValues
}

input OfferSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OfferSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfferSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfferSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OfferWhereInput
}

input OfferUpdateInput {
  title: String
  text: String
  author: UserUpdateOneInput
}

input OfferWhereInput {
  """Logical AND on all given filters."""
  AND: [OfferWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfferWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfferWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: UserWhereInput
}

input OfferWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
  isPublished: Boolean!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  text: String!
  isPublished: Boolean
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  isPublished_ASC
  isPublished_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
  isPublished: Boolean!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  text: String
  isPublished: Boolean
  author: UserUpdateOneInput
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer]!
  zrequests(where: ZrequestWhereInput, orderBy: ZrequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zrequest]!
  zsellers(where: ZsellerWhereInput, orderBy: ZsellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zseller]!
  zoffers(where: ZofferWhereInput, orderBy: ZofferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zoffer]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  zfriendships(where: ZfriendshipWhereInput, orderBy: ZfriendshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zfriendship]!
  zusers(where: ZuserWhereInput, orderBy: ZuserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zuser]!
  post(where: PostWhereUniqueInput!): Post
  offer(where: OfferWhereUniqueInput!): Offer
  zrequest(where: ZrequestWhereUniqueInput!): Zrequest
  zseller(where: ZsellerWhereUniqueInput!): Zseller
  zoffer(where: ZofferWhereUniqueInput!): Zoffer
  user(where: UserWhereUniqueInput!): User
  zfriendship(where: ZfriendshipWhereUniqueInput!): Zfriendship
  zuser(where: ZuserWhereUniqueInput!): Zuser
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  offersConnection(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfferConnection!
  zrequestsConnection(where: ZrequestWhereInput, orderBy: ZrequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ZrequestConnection!
  zsellersConnection(where: ZsellerWhereInput, orderBy: ZsellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ZsellerConnection!
  zoffersConnection(where: ZofferWhereInput, orderBy: ZofferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ZofferConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  zfriendshipsConnection(where: ZfriendshipWhereInput, orderBy: ZfriendshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ZfriendshipConnection!
  zusersConnection(where: ZuserWhereInput, orderBy: ZuserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ZuserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  offer(where: OfferSubscriptionWhereInput): OfferSubscriptionPayload
  zrequest(where: ZrequestSubscriptionWhereInput): ZrequestSubscriptionPayload
  zseller(where: ZsellerSubscriptionWhereInput): ZsellerSubscriptionPayload
  zoffer(where: ZofferSubscriptionWhereInput): ZofferSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  zfriendship(where: ZfriendshipSubscriptionWhereInput): ZfriendshipSubscriptionPayload
  zuser(where: ZuserSubscriptionWhereInput): ZuserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  about: String
  password: String!
  friends(where: ZfriendshipWhereInput, orderBy: ZfriendshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zfriendship!]
  interests: [String!]!
  requests(where: ZrequestWhereInput, orderBy: ZrequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zrequest!]
  inbox(where: ZofferWhereInput, orderBy: ZofferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zoffer!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  about: String
  password: String!
  interests: UserCreateinterestsInput
  friends: ZfriendshipCreateManyInput
  requests: ZrequestCreateManyInput
  inbox: ZofferCreateManyInput
}

input UserCreateinterestsInput {
  set: [String!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  about_ASC
  about_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  about: String
  password: String!
  interests: [String!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  about: String
  password: String
  interests: UserUpdateinterestsInput
  friends: ZfriendshipUpdateManyInput
  requests: ZrequestUpdateManyInput
  inbox: ZofferUpdateManyInput
}

input UserUpdateInput {
  name: String
  email: String
  about: String
  password: String
  interests: UserUpdateinterestsInput
  friends: ZfriendshipUpdateManyInput
  requests: ZrequestUpdateManyInput
  inbox: ZofferUpdateManyInput
}

input UserUpdateinterestsInput {
  set: [String!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  about: String

  """All values that are not equal to given value."""
  about_not: String

  """All values that are contained in given list."""
  about_in: [String!]

  """All values that are not contained in given list."""
  about_not_in: [String!]

  """All values less than the given value."""
  about_lt: String

  """All values less than or equal the given value."""
  about_lte: String

  """All values greater than the given value."""
  about_gt: String

  """All values greater than or equal the given value."""
  about_gte: String

  """All values containing the given string."""
  about_contains: String

  """All values not containing the given string."""
  about_not_contains: String

  """All values starting with the given string."""
  about_starts_with: String

  """All values not starting with the given string."""
  about_not_starts_with: String

  """All values ending with the given string."""
  about_ends_with: String

  """All values not ending with the given string."""
  about_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  friends_every: ZfriendshipWhereInput
  friends_some: ZfriendshipWhereInput
  friends_none: ZfriendshipWhereInput
  requests_every: ZrequestWhereInput
  requests_some: ZrequestWhereInput
  requests_none: ZrequestWhereInput
  inbox_every: ZofferWhereInput
  inbox_some: ZofferWhereInput
  inbox_none: ZofferWhereInput
  _MagicalBackRelation_PostToUser_every: PostWhereInput
  _MagicalBackRelation_PostToUser_some: PostWhereInput
  _MagicalBackRelation_PostToUser_none: PostWhereInput
  _MagicalBackRelation_OfferToUser_every: OfferWhereInput
  _MagicalBackRelation_OfferToUser_some: OfferWhereInput
  _MagicalBackRelation_OfferToUser_none: OfferWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Zfriendship implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  friendsBecause: [String!]!
  offerAllowance: Int!
  friend(where: ZsellerWhereInput): Zseller!
}

"""A connection to a list of items."""
type ZfriendshipConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ZfriendshipEdge]!
  aggregate: AggregateZfriendship!
}

input ZfriendshipCreatefriendsBecauseInput {
  set: [String!]
}

input ZfriendshipCreateInput {
  offerAllowance: Int
  friendsBecause: ZfriendshipCreatefriendsBecauseInput
  friend: ZsellerCreateOneInput!
}

input ZfriendshipCreateManyInput {
  create: [ZfriendshipCreateInput!]
  connect: [ZfriendshipWhereUniqueInput!]
}

"""An edge in a connection."""
type ZfriendshipEdge {
  """The item at the end of the edge."""
  node: Zfriendship!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ZfriendshipOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  offerAllowance_ASC
  offerAllowance_DESC
}

type ZfriendshipPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  friendsBecause: [String!]!
  offerAllowance: Int!
}

type ZfriendshipSubscriptionPayload {
  mutation: MutationType!
  node: Zfriendship
  updatedFields: [String!]
  previousValues: ZfriendshipPreviousValues
}

input ZfriendshipSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ZfriendshipSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZfriendshipSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZfriendshipSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ZfriendshipWhereInput
}

input ZfriendshipUpdateDataInput {
  offerAllowance: Int
  friendsBecause: ZfriendshipUpdatefriendsBecauseInput
  friend: ZsellerUpdateOneInput
}

input ZfriendshipUpdatefriendsBecauseInput {
  set: [String!]
}

input ZfriendshipUpdateInput {
  offerAllowance: Int
  friendsBecause: ZfriendshipUpdatefriendsBecauseInput
  friend: ZsellerUpdateOneInput
}

input ZfriendshipUpdateManyInput {
  create: [ZfriendshipCreateInput!]
  connect: [ZfriendshipWhereUniqueInput!]
  disconnect: [ZfriendshipWhereUniqueInput!]
  delete: [ZfriendshipWhereUniqueInput!]
  update: [ZfriendshipUpdateWithWhereUniqueNestedInput!]
  upsert: [ZfriendshipUpsertWithWhereUniqueNestedInput!]
}

input ZfriendshipUpdateWithWhereUniqueNestedInput {
  where: ZfriendshipWhereUniqueInput!
  data: ZfriendshipUpdateDataInput!
}

input ZfriendshipUpsertWithWhereUniqueNestedInput {
  where: ZfriendshipWhereUniqueInput!
  update: ZfriendshipUpdateDataInput!
  create: ZfriendshipCreateInput!
}

input ZfriendshipWhereInput {
  """Logical AND on all given filters."""
  AND: [ZfriendshipWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZfriendshipWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZfriendshipWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  offerAllowance: Int

  """All values that are not equal to given value."""
  offerAllowance_not: Int

  """All values that are contained in given list."""
  offerAllowance_in: [Int!]

  """All values that are not contained in given list."""
  offerAllowance_not_in: [Int!]

  """All values less than the given value."""
  offerAllowance_lt: Int

  """All values less than or equal the given value."""
  offerAllowance_lte: Int

  """All values greater than the given value."""
  offerAllowance_gt: Int

  """All values greater than or equal the given value."""
  offerAllowance_gte: Int
  friend: ZsellerWhereInput
  _MagicalBackRelation_ZfriendshipToZuser_every: ZuserWhereInput
  _MagicalBackRelation_ZfriendshipToZuser_some: ZuserWhereInput
  _MagicalBackRelation_ZfriendshipToZuser_none: ZuserWhereInput
  _MagicalBackRelation_UserToZfriendship_every: UserWhereInput
  _MagicalBackRelation_UserToZfriendship_some: UserWhereInput
  _MagicalBackRelation_UserToZfriendship_none: UserWhereInput
}

input ZfriendshipWhereUniqueInput {
  id: ID
}

type Zoffer implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  expiresAt: DateTime!
  title: String!
  text: String!
  author(where: ZsellerWhereInput): Zseller!
}

"""A connection to a list of items."""
type ZofferConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ZofferEdge]!
  aggregate: AggregateZoffer!
}

input ZofferCreateInput {
  expiresAt: DateTime!
  title: String!
  text: String!
  author: ZsellerCreateOneInput!
}

input ZofferCreateManyInput {
  create: [ZofferCreateInput!]
  connect: [ZofferWhereUniqueInput!]
}

"""An edge in a connection."""
type ZofferEdge {
  """The item at the end of the edge."""
  node: Zoffer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ZofferOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  expiresAt_ASC
  expiresAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type ZofferPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  expiresAt: DateTime!
  title: String!
  text: String!
}

type ZofferSubscriptionPayload {
  mutation: MutationType!
  node: Zoffer
  updatedFields: [String!]
  previousValues: ZofferPreviousValues
}

input ZofferSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ZofferSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZofferSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZofferSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ZofferWhereInput
}

input ZofferUpdateDataInput {
  expiresAt: DateTime
  title: String
  text: String
  author: ZsellerUpdateOneInput
}

input ZofferUpdateInput {
  expiresAt: DateTime
  title: String
  text: String
  author: ZsellerUpdateOneInput
}

input ZofferUpdateManyInput {
  create: [ZofferCreateInput!]
  connect: [ZofferWhereUniqueInput!]
  disconnect: [ZofferWhereUniqueInput!]
  delete: [ZofferWhereUniqueInput!]
  update: [ZofferUpdateWithWhereUniqueNestedInput!]
  upsert: [ZofferUpsertWithWhereUniqueNestedInput!]
}

input ZofferUpdateWithWhereUniqueNestedInput {
  where: ZofferWhereUniqueInput!
  data: ZofferUpdateDataInput!
}

input ZofferUpsertWithWhereUniqueNestedInput {
  where: ZofferWhereUniqueInput!
  update: ZofferUpdateDataInput!
  create: ZofferCreateInput!
}

input ZofferWhereInput {
  """Logical AND on all given filters."""
  AND: [ZofferWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZofferWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZofferWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  expiresAt: DateTime

  """All values that are not equal to given value."""
  expiresAt_not: DateTime

  """All values that are contained in given list."""
  expiresAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expiresAt_not_in: [DateTime!]

  """All values less than the given value."""
  expiresAt_lt: DateTime

  """All values less than or equal the given value."""
  expiresAt_lte: DateTime

  """All values greater than the given value."""
  expiresAt_gt: DateTime

  """All values greater than or equal the given value."""
  expiresAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: ZsellerWhereInput
  _MagicalBackRelation_UserToZoffer_every: UserWhereInput
  _MagicalBackRelation_UserToZoffer_some: UserWhereInput
  _MagicalBackRelation_UserToZoffer_none: UserWhereInput
  _MagicalBackRelation_ZofferToZuser_every: ZuserWhereInput
  _MagicalBackRelation_ZofferToZuser_some: ZuserWhereInput
  _MagicalBackRelation_ZofferToZuser_none: ZuserWhereInput
}

input ZofferWhereUniqueInput {
  id: ID
}

type Zrequest implements Node {
  to(where: ZsellerWhereInput): Zseller!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  wants: [String!]!
  title: String!
  text: String!
  author(where: ZuserWhereInput): Zuser!
  isPublished: Boolean!
}

"""A connection to a list of items."""
type ZrequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ZrequestEdge]!
  aggregate: AggregateZrequest!
}

input ZrequestCreateInput {
  title: String!
  text: String!
  isPublished: Boolean
  wants: ZrequestCreatewantsInput
  to: ZsellerCreateOneWithoutInboxInput!
  author: ZuserCreateOneWithoutRequestsInput!
}

input ZrequestCreateManyInput {
  create: [ZrequestCreateInput!]
  connect: [ZrequestWhereUniqueInput!]
}

input ZrequestCreateManyWithoutAuthorInput {
  create: [ZrequestCreateWithoutAuthorInput!]
  connect: [ZrequestWhereUniqueInput!]
}

input ZrequestCreateManyWithoutToInput {
  create: [ZrequestCreateWithoutToInput!]
  connect: [ZrequestWhereUniqueInput!]
}

input ZrequestCreatewantsInput {
  set: [String!]
}

input ZrequestCreateWithoutAuthorInput {
  title: String!
  text: String!
  isPublished: Boolean
  wants: ZrequestCreatewantsInput
  to: ZsellerCreateOneWithoutInboxInput!
}

input ZrequestCreateWithoutToInput {
  title: String!
  text: String!
  isPublished: Boolean
  wants: ZrequestCreatewantsInput
  author: ZuserCreateOneWithoutRequestsInput!
}

"""An edge in a connection."""
type ZrequestEdge {
  """The item at the end of the edge."""
  node: Zrequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ZrequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  isPublished_ASC
  isPublished_DESC
}

type ZrequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  wants: [String!]!
  title: String!
  text: String!
  isPublished: Boolean!
}

type ZrequestSubscriptionPayload {
  mutation: MutationType!
  node: Zrequest
  updatedFields: [String!]
  previousValues: ZrequestPreviousValues
}

input ZrequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ZrequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZrequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZrequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ZrequestWhereInput
}

input ZrequestUpdateDataInput {
  title: String
  text: String
  isPublished: Boolean
  wants: ZrequestUpdatewantsInput
  to: ZsellerUpdateOneWithoutInboxInput
  author: ZuserUpdateOneWithoutRequestsInput
}

input ZrequestUpdateInput {
  title: String
  text: String
  isPublished: Boolean
  wants: ZrequestUpdatewantsInput
  to: ZsellerUpdateOneWithoutInboxInput
  author: ZuserUpdateOneWithoutRequestsInput
}

input ZrequestUpdateManyInput {
  create: [ZrequestCreateInput!]
  connect: [ZrequestWhereUniqueInput!]
  disconnect: [ZrequestWhereUniqueInput!]
  delete: [ZrequestWhereUniqueInput!]
  update: [ZrequestUpdateWithWhereUniqueNestedInput!]
  upsert: [ZrequestUpsertWithWhereUniqueNestedInput!]
}

input ZrequestUpdateManyWithoutAuthorInput {
  create: [ZrequestCreateWithoutAuthorInput!]
  connect: [ZrequestWhereUniqueInput!]
  disconnect: [ZrequestWhereUniqueInput!]
  delete: [ZrequestWhereUniqueInput!]
  update: [ZrequestUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ZrequestUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ZrequestUpdateManyWithoutToInput {
  create: [ZrequestCreateWithoutToInput!]
  connect: [ZrequestWhereUniqueInput!]
  disconnect: [ZrequestWhereUniqueInput!]
  delete: [ZrequestWhereUniqueInput!]
  update: [ZrequestUpdateWithWhereUniqueWithoutToInput!]
  upsert: [ZrequestUpsertWithWhereUniqueWithoutToInput!]
}

input ZrequestUpdatewantsInput {
  set: [String!]
}

input ZrequestUpdateWithoutAuthorDataInput {
  title: String
  text: String
  isPublished: Boolean
  wants: ZrequestUpdatewantsInput
  to: ZsellerUpdateOneWithoutInboxInput
}

input ZrequestUpdateWithoutToDataInput {
  title: String
  text: String
  isPublished: Boolean
  wants: ZrequestUpdatewantsInput
  author: ZuserUpdateOneWithoutRequestsInput
}

input ZrequestUpdateWithWhereUniqueNestedInput {
  where: ZrequestWhereUniqueInput!
  data: ZrequestUpdateDataInput!
}

input ZrequestUpdateWithWhereUniqueWithoutAuthorInput {
  where: ZrequestWhereUniqueInput!
  data: ZrequestUpdateWithoutAuthorDataInput!
}

input ZrequestUpdateWithWhereUniqueWithoutToInput {
  where: ZrequestWhereUniqueInput!
  data: ZrequestUpdateWithoutToDataInput!
}

input ZrequestUpsertWithWhereUniqueNestedInput {
  where: ZrequestWhereUniqueInput!
  update: ZrequestUpdateDataInput!
  create: ZrequestCreateInput!
}

input ZrequestUpsertWithWhereUniqueWithoutAuthorInput {
  where: ZrequestWhereUniqueInput!
  update: ZrequestUpdateWithoutAuthorDataInput!
  create: ZrequestCreateWithoutAuthorInput!
}

input ZrequestUpsertWithWhereUniqueWithoutToInput {
  where: ZrequestWhereUniqueInput!
  update: ZrequestUpdateWithoutToDataInput!
  create: ZrequestCreateWithoutToInput!
}

input ZrequestWhereInput {
  """Logical AND on all given filters."""
  AND: [ZrequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZrequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZrequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  to: ZsellerWhereInput
  author: ZuserWhereInput
  _MagicalBackRelation_UserToZrequest_every: UserWhereInput
  _MagicalBackRelation_UserToZrequest_some: UserWhereInput
  _MagicalBackRelation_UserToZrequest_none: UserWhereInput
}

input ZrequestWhereUniqueInput {
  id: ID
}

type Zseller implements Node {
  id: ID!
  name: String!
  about: String!
  email: String!
  password: String!
  patrons(where: ZuserWhereInput, orderBy: ZuserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zuser!]
  sells: [String!]!
  inbox(where: ZrequestWhereInput, orderBy: ZrequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zrequest!]
}

"""A connection to a list of items."""
type ZsellerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ZsellerEdge]!
  aggregate: AggregateZseller!
}

input ZsellerCreateInput {
  name: String!
  about: String!
  email: String!
  password: String!
  sells: ZsellerCreatesellsInput
  patrons: ZuserCreateManyInput
  inbox: ZrequestCreateManyWithoutToInput
}

input ZsellerCreateOneInput {
  create: ZsellerCreateInput
  connect: ZsellerWhereUniqueInput
}

input ZsellerCreateOneWithoutInboxInput {
  create: ZsellerCreateWithoutInboxInput
  connect: ZsellerWhereUniqueInput
}

input ZsellerCreatesellsInput {
  set: [String!]
}

input ZsellerCreateWithoutInboxInput {
  name: String!
  about: String!
  email: String!
  password: String!
  sells: ZsellerCreatesellsInput
  patrons: ZuserCreateManyInput
}

"""An edge in a connection."""
type ZsellerEdge {
  """The item at the end of the edge."""
  node: Zseller!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ZsellerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  about_ASC
  about_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ZsellerPreviousValues {
  id: ID!
  name: String!
  about: String!
  email: String!
  password: String!
  sells: [String!]!
}

type ZsellerSubscriptionPayload {
  mutation: MutationType!
  node: Zseller
  updatedFields: [String!]
  previousValues: ZsellerPreviousValues
}

input ZsellerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ZsellerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZsellerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZsellerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ZsellerWhereInput
}

input ZsellerUpdateDataInput {
  name: String
  about: String
  email: String
  password: String
  sells: ZsellerUpdatesellsInput
  patrons: ZuserUpdateManyInput
  inbox: ZrequestUpdateManyWithoutToInput
}

input ZsellerUpdateInput {
  name: String
  about: String
  email: String
  password: String
  sells: ZsellerUpdatesellsInput
  patrons: ZuserUpdateManyInput
  inbox: ZrequestUpdateManyWithoutToInput
}

input ZsellerUpdateOneInput {
  create: ZsellerCreateInput
  connect: ZsellerWhereUniqueInput
  delete: Boolean
  update: ZsellerUpdateDataInput
  upsert: ZsellerUpsertNestedInput
}

input ZsellerUpdateOneWithoutInboxInput {
  create: ZsellerCreateWithoutInboxInput
  connect: ZsellerWhereUniqueInput
  delete: Boolean
  update: ZsellerUpdateWithoutInboxDataInput
  upsert: ZsellerUpsertWithoutInboxInput
}

input ZsellerUpdatesellsInput {
  set: [String!]
}

input ZsellerUpdateWithoutInboxDataInput {
  name: String
  about: String
  email: String
  password: String
  sells: ZsellerUpdatesellsInput
  patrons: ZuserUpdateManyInput
}

input ZsellerUpsertNestedInput {
  update: ZsellerUpdateDataInput!
  create: ZsellerCreateInput!
}

input ZsellerUpsertWithoutInboxInput {
  update: ZsellerUpdateWithoutInboxDataInput!
  create: ZsellerCreateWithoutInboxInput!
}

input ZsellerWhereInput {
  """Logical AND on all given filters."""
  AND: [ZsellerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZsellerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZsellerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  about: String

  """All values that are not equal to given value."""
  about_not: String

  """All values that are contained in given list."""
  about_in: [String!]

  """All values that are not contained in given list."""
  about_not_in: [String!]

  """All values less than the given value."""
  about_lt: String

  """All values less than or equal the given value."""
  about_lte: String

  """All values greater than the given value."""
  about_gt: String

  """All values greater than or equal the given value."""
  about_gte: String

  """All values containing the given string."""
  about_contains: String

  """All values not containing the given string."""
  about_not_contains: String

  """All values starting with the given string."""
  about_starts_with: String

  """All values not starting with the given string."""
  about_not_starts_with: String

  """All values ending with the given string."""
  about_ends_with: String

  """All values not ending with the given string."""
  about_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  patrons_every: ZuserWhereInput
  patrons_some: ZuserWhereInput
  patrons_none: ZuserWhereInput
  inbox_every: ZrequestWhereInput
  inbox_some: ZrequestWhereInput
  inbox_none: ZrequestWhereInput
  _MagicalBackRelation_ZofferToZseller_every: ZofferWhereInput
  _MagicalBackRelation_ZofferToZseller_some: ZofferWhereInput
  _MagicalBackRelation_ZofferToZseller_none: ZofferWhereInput
  _MagicalBackRelation_ZfriendshipToZseller_every: ZfriendshipWhereInput
  _MagicalBackRelation_ZfriendshipToZseller_some: ZfriendshipWhereInput
  _MagicalBackRelation_ZfriendshipToZseller_none: ZfriendshipWhereInput
}

input ZsellerWhereUniqueInput {
  id: ID
  email: String
}

type Zuser implements Node {
  id: ID!
  name: String!
  email: String!
  about: String!
  password: String!
  friends(where: ZfriendshipWhereInput, orderBy: ZfriendshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zfriendship!]
  interests: [String!]!
  requests(where: ZrequestWhereInput, orderBy: ZrequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zrequest!]
  inbox(where: ZofferWhereInput, orderBy: ZofferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Zoffer!]
}

"""A connection to a list of items."""
type ZuserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ZuserEdge]!
  aggregate: AggregateZuser!
}

input ZuserCreateInput {
  name: String!
  email: String!
  about: String!
  password: String!
  interests: ZuserCreateinterestsInput
  friends: ZfriendshipCreateManyInput
  requests: ZrequestCreateManyWithoutAuthorInput
  inbox: ZofferCreateManyInput
}

input ZuserCreateinterestsInput {
  set: [String!]
}

input ZuserCreateManyInput {
  create: [ZuserCreateInput!]
  connect: [ZuserWhereUniqueInput!]
}

input ZuserCreateOneWithoutRequestsInput {
  create: ZuserCreateWithoutRequestsInput
  connect: ZuserWhereUniqueInput
}

input ZuserCreateWithoutRequestsInput {
  name: String!
  email: String!
  about: String!
  password: String!
  interests: ZuserCreateinterestsInput
  friends: ZfriendshipCreateManyInput
  inbox: ZofferCreateManyInput
}

"""An edge in a connection."""
type ZuserEdge {
  """The item at the end of the edge."""
  node: Zuser!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ZuserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  about_ASC
  about_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ZuserPreviousValues {
  id: ID!
  name: String!
  email: String!
  about: String!
  password: String!
  interests: [String!]!
}

type ZuserSubscriptionPayload {
  mutation: MutationType!
  node: Zuser
  updatedFields: [String!]
  previousValues: ZuserPreviousValues
}

input ZuserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ZuserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZuserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZuserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ZuserWhereInput
}

input ZuserUpdateDataInput {
  name: String
  email: String
  about: String
  password: String
  interests: ZuserUpdateinterestsInput
  friends: ZfriendshipUpdateManyInput
  requests: ZrequestUpdateManyWithoutAuthorInput
  inbox: ZofferUpdateManyInput
}

input ZuserUpdateInput {
  name: String
  email: String
  about: String
  password: String
  interests: ZuserUpdateinterestsInput
  friends: ZfriendshipUpdateManyInput
  requests: ZrequestUpdateManyWithoutAuthorInput
  inbox: ZofferUpdateManyInput
}

input ZuserUpdateinterestsInput {
  set: [String!]
}

input ZuserUpdateManyInput {
  create: [ZuserCreateInput!]
  connect: [ZuserWhereUniqueInput!]
  disconnect: [ZuserWhereUniqueInput!]
  delete: [ZuserWhereUniqueInput!]
  update: [ZuserUpdateWithWhereUniqueNestedInput!]
  upsert: [ZuserUpsertWithWhereUniqueNestedInput!]
}

input ZuserUpdateOneWithoutRequestsInput {
  create: ZuserCreateWithoutRequestsInput
  connect: ZuserWhereUniqueInput
  delete: Boolean
  update: ZuserUpdateWithoutRequestsDataInput
  upsert: ZuserUpsertWithoutRequestsInput
}

input ZuserUpdateWithoutRequestsDataInput {
  name: String
  email: String
  about: String
  password: String
  interests: ZuserUpdateinterestsInput
  friends: ZfriendshipUpdateManyInput
  inbox: ZofferUpdateManyInput
}

input ZuserUpdateWithWhereUniqueNestedInput {
  where: ZuserWhereUniqueInput!
  data: ZuserUpdateDataInput!
}

input ZuserUpsertWithoutRequestsInput {
  update: ZuserUpdateWithoutRequestsDataInput!
  create: ZuserCreateWithoutRequestsInput!
}

input ZuserUpsertWithWhereUniqueNestedInput {
  where: ZuserWhereUniqueInput!
  update: ZuserUpdateDataInput!
  create: ZuserCreateInput!
}

input ZuserWhereInput {
  """Logical AND on all given filters."""
  AND: [ZuserWhereInput!]

  """Logical OR on all given filters."""
  OR: [ZuserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ZuserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  about: String

  """All values that are not equal to given value."""
  about_not: String

  """All values that are contained in given list."""
  about_in: [String!]

  """All values that are not contained in given list."""
  about_not_in: [String!]

  """All values less than the given value."""
  about_lt: String

  """All values less than or equal the given value."""
  about_lte: String

  """All values greater than the given value."""
  about_gt: String

  """All values greater than or equal the given value."""
  about_gte: String

  """All values containing the given string."""
  about_contains: String

  """All values not containing the given string."""
  about_not_contains: String

  """All values starting with the given string."""
  about_starts_with: String

  """All values not starting with the given string."""
  about_not_starts_with: String

  """All values ending with the given string."""
  about_ends_with: String

  """All values not ending with the given string."""
  about_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  friends_every: ZfriendshipWhereInput
  friends_some: ZfriendshipWhereInput
  friends_none: ZfriendshipWhereInput
  requests_every: ZrequestWhereInput
  requests_some: ZrequestWhereInput
  requests_none: ZrequestWhereInput
  inbox_every: ZofferWhereInput
  inbox_some: ZofferWhereInput
  inbox_none: ZofferWhereInput
  _MagicalBackRelation_ZsellerToZuser_every: ZsellerWhereInput
  _MagicalBackRelation_ZsellerToZuser_some: ZsellerWhereInput
  _MagicalBackRelation_ZsellerToZuser_none: ZsellerWhereInput
}

input ZuserWhereUniqueInput {
  id: ID
  email: String
}
